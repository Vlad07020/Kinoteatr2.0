
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Движения.ОстаткиПродукции.Записывать = Истина;

	// сгрупировать поля в табличной части документа по номенклатуре
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПродукцииПродукция.Товар КАК Товар,
		|	СУММА(ЗаказПродукцииПродукция.Количество) КАК Количество
		|ПОМЕСТИТЬ ДокТЧ
		|ИЗ
		|	Документ.ЗаказПродукции.Продукция КАК ЗаказПродукцииПродукция
		|ГДЕ
		|	ЗаказПродукцииПродукция.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПродукцииПродукция.Товар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокТЧ.Товар КАК Товар,
		|	ДокТЧ.Количество КАК Количество
		|ИЗ
		|	ДокТЧ КАК ДокТЧ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Движение = Движения.ОстаткиПродукции.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Товар = ВыборкаДетальныеЗаписи.Товар;
		Движение.Кинотеатр = Кинотеатр;
		Движение.Количество = ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;
	
	Движения.ОстаткиПродукции.БлокироватьДляИзменения = Истина;
	
	Движения.Записать();
	
	
	// запрос к остаткам - контроль остатков
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиПродукцииОстатки.Товар КАК Товар,
		|	ОстаткиПродукцииОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиПродукции.Остатки(
		|			&МоментВремени,
		|			Кинотеатр = &Кинотеатр
		|				И Товар В
		|					(ВЫБРАТЬ
		|						ДокТЧ.Товар КАК Товар
		|					ИЗ
		|						ДокТЧ КАК ДокТЧ)) КАК ОстаткиПродукцииОстатки
		|ГДЕ
		|	ОстаткиПродукцииОстатки.КоличествоОстаток < 0";
	
	Граница = Новый Граница(МоментВремени(), ВидГраницы.Включая);

	
	Запрос.УстановитьПараметр("Кинотеатр", Кинотеатр);
	Запрос.УстановитьПараметр("МоментВремени", Граница);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
		Отказ=Истина;
		
		// порционно выдает данные
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			 Сообщить("Мало продукции " + Выборка.Товар + ", нужно еще " + (-Выборка.КоличествоОстаток));
		КонецЦикла;
		
	КонецЕсли;

		
КонецПроцедуры



Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Обходим строки и проверяем заполнение реквизита
	
	Для Индекс = 0 по Продукция.Количество()-1 Цикл
		СтрокаТовар = Продукция.Получить(Индекс);
		Если Не ЗначениеЗаполнено(СтрокаТовар.Товар) Тогда
			Сообщение = Новый СообщениеПользователю();
			Строка = Индекс + 1;
			Сообщение.Текст = "В строке " + Строка + " не заполнено значение товара";
			Сообщение.Поле = "Товары[" + Индекс + "].Товар";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТовар.Количество) Тогда
			Сообщение = Новый СообщениеПользователю();
			Строка = Индекс + 1;
			Сообщение.Текст = "В строке " + Строка + " не заполнено значение количества товара";
			Сообщение.Поле = "Товары[" + Индекс + "].Товар";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			Отказ = Истина;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
//	
//	Движения.ОстаткиПродукции.Записывать = Истина;

//	// сгрупировать поля в табличной части документа по номенклатуре
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ЗаказПродукцииПродукция.Товар КАК Товар,
//		|	СУММА(ЗаказПродукцииПродукция.Количество) КАК Количество
//		|ПОМЕСТИТЬ ДокТЧ
//		|ИЗ
//		|	Документ.ЗаказПродукции.Продукция КАК ЗаказПродукцииПродукция
//		|ГДЕ
//		|	ЗаказПродукцииПродукция.Ссылка = &Ссылка
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ЗаказПродукцииПродукция.Товар
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ДокТЧ.Товар КАК Товар,
//		|	ДокТЧ.Количество КАК Количество
//		|ИЗ
//		|	ДокТЧ КАК ДокТЧ";
//	
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		Движение = Движения.ОстаткиПродукции.Добавить();
//		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
//		Движение.Период = Дата;
//		Движение.Товар = ВыборкаДетальныеЗаписи.Товар;
//		Движение.Кинотеатр = Кинотеатр;
//		Движение.Количество = ВыборкаДетальныеЗаписи.Количество;
//	КонецЦикла;
//	
//	Движения.ОстаткиПродукции.БлокироватьДляИзменения = Истина;
//	
//	Движения.Записать();
//	
//	
//	// запрос к остаткам - контроль остатков
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ОстаткиПродукцииОстатки.Товар КАК Товар,
//		|	ОстаткиПродукцииОстатки.КоличествоОстаток КАК КоличествоОстаток
//		|ИЗ
//		|	РегистрНакопления.ОстаткиПродукции.Остатки(
//		|			&МоментВремени,
//		|			Кинотеатр = &Кинотеатр
//		|				И Товар В
//		|					(ВЫБРАТЬ
//		|						ДокТЧ.Товар КАК Товар
//		|					ИЗ
//		|						ДокТЧ КАК ДокТЧ)) КАК ОстаткиПродукцииОстатки
//		|ГДЕ
//		|	ОстаткиПродукцииОстатки.КоличествоОстаток < 0";
//	
//	Граница = Новый Граница(МоментВремени(), ВидГраницы.Включая);

//	
//	Запрос.УстановитьПараметр("Кинотеатр", Кинотеатр);
//	Запрос.УстановитьПараметр("МоментВремени", Граница);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//		
//	Если Не РезультатЗапроса.Пустой() Тогда
//		Отказ=Истина;
//		
//		// порционно выдает данные
//		Выборка = РезультатЗапроса.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			 Сообщить("Мало продукции " + Выборка.Товар + ", нужно еще " + (-Выборка.КоличествоОстаток));
//		КонецЦикла;
//		
//	КонецЕсли;

//КонецПроцедуры





//Функция ПроверкаКорректностиЭлектроннойПочты()
//RegExp = Новый COMОбъект("VBScript.RegExp");
//RegExp.MultiLine = Ложь;
//RegExp.Global = Истина;
//RegExp.IgnoreCase = Истина;
//RegExp.Pattern="^[a-zA-Z0-9_'+*/^&=?~{}\-](\.?[a-zA-Z0-9_'+*/^&=?~{}\-])*\@((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(\:\d{1,3})?)||(((([a-zA-Z0-9][a-zA-Z0-9\-]+[a-zA-Z0-9])|([a-zA-Z0-9]{1,2}))[\.]{1})+([a-zA-Z]{2,6})))$";
//Если RegExp.Test(ЭлектроннаяПочта) Тогда
//Сообщить("Адрес корректный!!!");
//Иначе
//Сообщить("Адрес не корректный!!!");
//КонецЕсли;
//КонецФункции // ПроверкаКорректностиЭлектроннойПочты()


